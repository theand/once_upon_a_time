head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2002.03.29.09.18.17;	author cs991033;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.29.08.34.01;	author cs991033;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.29.07.38.54;	author cs991033;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.28.18.22.34;	author cs991033;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.28.17.53.55;	author cs991033;	state Exp;
branches;
next	1.1;

1.1
date	2002.03.27.10.07.58;	author cs991033;	state Exp;
branches;
next	;


desc
@BitMap Sorty
@


1.6
log
@이럴수가 인덱스하나 잘못해서 삽질을 하다!!!
완성!
@
text
@#include <stdio.h>

enum {MAX_NUMBER=10, NUM_ELEM=12};

void clearAllBits(unsigned char *aBit, int aTotalBitSize);
void setBit(unsigned char *aBit, int aNumber);
void printBit(unsigned char *aBit, int aBitIndex);
void test_setBit(unsigned char *aBit, int aRange);

int main(void)
{

	unsigned char bit[MAX_NUMBER]="TEST";

	int num[NUM_ELEM]={12,43,16,3,70,56,21,67,45,23,68,26};
	//~ 0 _ 1        _ 2  _ 3 _ 4 _ 5     _ 6 _  7  _ 8       _ 9 : array index 
	//0-7 8-15     16-23 24-31 32-39    40-47 48-55 56-63 64-71 : range by index
	//3 _ 12 _ 16 21 23 _ 26 _   _   _ 43 45 _    56 _ 67 68 70 : sorted number
	//16 _ 8        _ 133 _ 32 _ 0     _ 20 _ 0 _ 128 _ 26     _ 0 : array value
	
	int i;

	clearAllBits(bit,MAX_NUMBER);

	for(i=0; i<NUM_ELEM; i++)
		setBit(bit, num[i]);

	for(i=0; i<MAX_NUMBER; i++)
		printBit(bit,i);
	printf("\n");

	return 0;
}


void test_setBit(unsigned char *aBit, int aRange)
{
	int i;

	for(i=0;i<aRange;i++){
		setBit(aBit,i);
		printf("%d - %d\n", i,aBit[i/8]);
		aBit[i/8]=0;
	}
}

void clearAllBits(unsigned char *aBit, int aTotalBitSize)
{
	//TODO: bit 별로 clear 하는 걸 만들어야겠다.
	int i;

	for(i=0;i<aTotalBitSize;i++)
		aBit[i]=0;
}

void setBit(unsigned char *aBit, int aNumber)
{
	unsigned char mask[]={128,64,32,16,8,4,2,1};

	aBit[aNumber/8]=aBit[aNumber/8] | mask[aNumber%8];
#ifdef DEBUG
	printf("%d - %d - %d - %d\n", aNumber , aNumber/8, aNumber%8, aBit[aNumber/8]);
#endif
}

void printBit(unsigned char *aBit, int aBitIndex)
{
	int i;
	unsigned char mask[]={ 128,64,32,16,8,4,2,1};

#ifdef DEBUG
	printf("%d--", aBitIndex);
#endif 
	for(i=0; i<8; i++)
		if( (aBit[aBitIndex] & mask[i]) == mask[i])
			printf("%d  ", 8*aBitIndex+i);
	//printf("\n");


}
@


1.5
log
@아직도 작업중. -_-
@
text
@d7 1
a7 1
void printBit(unsigned char *aBit, int aNumber);
d16 4
a19 4
	//~ 0 _ 1        _ 2  _ 3 _ 4 _ 5     _ 6 _  7  _ 8       _ 9 : index 
	//0-7 8-15     16-23 24-31 32-39    40-47 48-55 56-63 64-71
	//3 _ 12 _ 16 21 23 _ 26 _   _   _ 43 45 _    56 _ 67 68 70 : sorted 
	//16 _ 8        _ 133 _ 32 _ 0     _ 20 _ 0 _ 128 _ 26     _ 0 
a24 1

d30 1
a30 2
		//printf("%d - %d\n", i, bit[i]);

d49 1
a49 1
	//TODO: 이렇게 몽땅 하는게 아니라 bit 별로 clear 하는 걸 만들어야겠다.
d52 1
a52 1
	for(i=0;i<aSize;i++)
d61 3
d66 1
a66 1
void printBit(unsigned char *aBit, int aNumber)
d71 3
a73 1
	printf("%d--", aNumber);
d75 3
a77 3
		if( (aBit[aNumber/8] & mask[i]) == mask[i])
			printf("%d  ", 8*aNumber+i);
	printf("\n");
@


1.4
log
@진행중.
@
text
@d5 1
a5 1
void clearBits(unsigned char *aBit, int aSize);
d16 5
a20 1
	//3 12 16 21 23 26 43 45 56 67 68 70
d23 1
a23 1
	clearBits(bit,10);
d31 1
d49 1
a49 1
void clearBits(unsigned char *aBit, int aSize)
d70 2
a71 1
	for(i=0; i<7; i++)
d73 2
a74 2
			printf("%u  ", 8*aNumber+i);
	//printf("----\n");
@


1.3
log
@불안정버전.
@
text
@a18 3
	//for(i=0; i<12; i++)
		//printf("%d ", num[i]);
	//printf("\n");
d20 1
a20 3
	//test_setBit(bit, 16);
	for(i=0; i<MAX_NUMBER; i++)
		printBit(bit,i);
d35 1
a35 1
	int i;// 1-32, 2-16, 3-8, 4-4,
d67 1
a67 1
			printf("%d  ", 8*aNumber+i);
@


1.2
log
@setBit - 제대로 작동함.
@
text
@d3 5
a7 3
void clearBits(char *aBit, int aSize);
void setBit(char *aBit, int aNumber);
void printBit(char *aBit, int aNumber);
d13 1
a13 1
	unsigned char bit[10]="TEST";
d15 3
a17 2
	//int num[13]={12,43,67,3,89,56,21,67,45,23,68,26,84};
	//int i;
d19 3
d23 3
a25 1
	test_setBit(bit, 16);
d27 1
a27 2
/*------------------------------------------------ 
	for(i=0; i<13; i++)
d30 1
a30 1
	for(i=0; i<13; i++)
a31 1
------------------------------------------------*/ 
d49 1
a49 1
void clearBits(char *aBit, int aSize)
d58 1
a58 1
void setBit(char *aBit, int aNumber)
d65 1
a65 2
/*
void printBit(char *aBit, int aNumber)
d68 1
a68 4
	unsigned char mask[]={ , , , };
	for(i=0; i<7; i++){
		if( aBit[aNumber] ^ mask[i] == some value){
			printf("%d", 8*aNumber+i);
d70 4
a76 1
*/
@


1.1
log
@Initial revision
@
text
@d6 1
d14 1
a14 1
	int i;// 1-32, 2-16, 3-8, 4-4,
d17 9
a26 4
	for(i=0;i<8;i++){
		setBit(bit,i);
		printf("%d - %d\n", i,bit[0]);
	}
d28 2
a29 2
	//for(i=0; i<13; i++)
		//setBit(bit, num[i]);
a30 2
	//for(i=0; i<13; i++)
		//printBit(bit,i);
d32 3
d36 5
a40 1
	return 0;
@
