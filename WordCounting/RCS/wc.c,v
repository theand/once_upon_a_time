head	1.14;
access;
symbols;
locks; strict;
comment	@ * @;


1.14
date	2002.08.01.13.26.01;	author cs991033;	state Exp;
branches;
next	1.13;

1.13
date	2002.08.01.11.30.40;	author cs991033;	state Exp;
branches;
next	1.12;

1.12
date	2002.07.30.11.58.38;	author cs991033;	state Exp;
branches;
next	1.11;

1.11
date	2002.07.26.12.23.36;	author cs991033;	state Exp;
branches;
next	1.10;

1.10
date	2002.07.26.08.49.25;	author cs991033;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.24.12.15.36;	author cs991033;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.24.10.24.37;	author cs991033;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.24.09.19.11;	author cs991033;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.24.08.49.19;	author cs991033;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.20.12.32.08;	author cs991033;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.20.12.23.28;	author cs991033;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.20.11.52.42;	author cs991033;	state Exp;
branches;
next	1.2;

1.2
date	2002.07.20.11.20.28;	author cs991033;	state Exp;
branches;
next	1.1;

1.1
date	2002.07.20.09.58.13;	author cs991033;	state Exp;
branches;
next	;


desc
@WordCounting program
@


1.14
log
@*** empty log message ***
@
text
@
/*
 * wc.c 
 */

#include "wc.h"
#include <string.h>
#include <ctype.h>
//#define DEBUG 

//////////////////// Global Data ////////////////////////

int isPrintLine;
int isPrintChar;
int isPrintWord;

int _numOfWords;
int _numOfLines;
int _numOfChars;

char *_fileName;
FILE *_fp=NULL;


////////////// Function //////////////////


void handleArgument(int argc, char **argv)
{
	//TODO - multiple argument
	if( argc==2 ){
		setFileName(argv[1]);
	}
	else if( argc==1 ){
		setFileName("stdin");
	}
	else{
		fprintf(stderr, "ERROR: this version of program doesn't support multiple arguments.\n");
		exit(EXIT_FAILURE);
	}
}
/////////////////////////////////////////////////

int getNumOfLines(void)
{
	return _numOfLines;
}
int getNumOfChars(void)
{
	return _numOfChars;
}
int getNumOfWords(void)
{
	return _numOfWords;
}
void setPrintMode(int mode)
{
	enum {line=4, word=2, chars=1, on=1, off=0};

	if( (mode & line) == line )
		isPrintLine =on;
	if( (mode & word) == word)
		isPrintWord = on;
	if( (mode & chars) == chars )
		isPrintChar = on;
}

void printResult(void)
{
	if( isPrintWord )
		printf("Number of Words = %d\n", getNumOfWords() );
	if( isPrintChar )
		printf("Number of Chars = %d\n", getNumOfChars() );
	if( isPrintLine)
		printf("Number of Lines = %d\n", getNumOfLines() );
}
/////////////////////////////////////////////////

void setFileName(char *name)
{
	assert(name!=NULL);

	_fileName = estrdup(name);
}

char * getFileName(void)
{
	assert(_fileName != NULL);
	return _fileName;
}

void initLineList(void)
{
	char *name = getFileName();

	if( StrEqual(name, "stdin")  )
		_fp = stdin;
	else{
		if( _fp == NULL){
		_fp = efopen(name, "r");
		}
	}
}
/////////////////////////////////////////////////

char *getLine(void)
{
	static char line[81];
	
	fgets(line, 80, _fp);

	/*//Delete \n
	line[strlen(line)-1]='\0';*/

	if( hasNextLine() == false )
		return "";

	return line;
}

int hasNextLine(void)
{
	return !feof(_fp);
}
/////////////////////////////////////////////////

int countWord(const char *aLine)
{
	int numOfWord=0;
	char *word;
	char *line ;
	char *SEPARATOR = " \t\n,.:;<>[]&%%";

	line = estrdup(aLine);

	for( word = strtok(line, SEPARATOR ); word!=NULL ; word = strtok(NULL, SEPARATOR)){
	
#ifdef DEBUG
		printf("%s\n", word);
#endif
		numOfWord++;
		//TODO : countWord 에 insertWord 까지 있는 것이 좀 이상.
		insertWord(word);
	}
	_numOfWords+=numOfWord;
	return numOfWord;
}

int countLine(const char *aLine)
{

	int count=0;
	char *s;


	s=strchr(aLine, '\n');
	if( s == NULL )
		return 0;

	while( s != NULL ){
		count++;
		s = strchr(s+1, '\n');
	}
	_numOfLines += count;
	return count;
}
int countChar(const char *aLine)
{
	int i;
	int count=0;
	for(i=0; aLine[i] != '\0' ; i++)
		if( isalpha(aLine[i]) )
			count++; 
	_numOfChars+=count;
	return count; 
}


//////////////// End Of File //////////////////////
@


1.13
log
@minor changes
@
text
@d142 1
@


1.12
log
@extract array routine to array.c
@
text
@d132 1
a132 1
	char *SEPERATOR = " \t\n,.:;<>[]&%%";
d136 1
a136 1
	for( word = strtok(line, SEPERATOR ); word!=NULL ; word = strtok(NULL, SEPERATOR)){
@


1.11
log
@insertWord()
getWordAt()
isInclude()
getIndexOf()
getOccurrenceOfWordAt()
printWordList()
@
text
@d3 1
a3 2
 * wc.c
 * 
d11 1
a11 1
//////////////////// Gloval Data ////////////////////////
a20 4
WordList _wordList[500];
int _currentInsertIndex=0;

//private
a175 59
/////////////////////////////////////////////////

void insertWord(const char *aWord)
{

	assert(aWord!=NULL);

	if( isInclude(aWord) ){
		_wordList[getIndexOf(aWord)].count++;
	}
	else{
		_wordList[_currentInsertIndex].word = estrdup(aWord);
		_wordList[_currentInsertIndex].count = 1;
		_currentInsertIndex++; 
	}
	//TODO free pointer.
	
}
int isInclude(const char *aWord)
{
	int i;

	for( i=0; i< _currentInsertIndex; i++)
		if( StrEqual(aWord, getWordAt(i)) )
			return true;

	return false; 
}

int getIndexOf(const char *aWord)
{
	int i;

	assert( isInclude(aWord) == true );

	for( i=0; i< _currentInsertIndex; i++)
		if( StrEqual(aWord, getWordAt(i)) )
			break;
	return i;
}

char *getWordAt(int i)
{
	return _wordList[i].word;
}

int getOccurrenceOfWordAt(int i)
{
	return _wordList[i].count;
}
void printWordList(void)
{
	//TODO make flag
	int i;
	for(i=0;i< _currentInsertIndex; i++){
		printf("%s\t%d\n", _wordList[i].word, _wordList[i].count );
	}
}

@


1.10
log
@substitute StrEqual
@
text
@d10 1
a10 1
#define DEBUG 
d22 3
d47 1
d82 1
d109 1
d130 1
d141 1
a141 1
	word = strtok(line, SEPERATOR );
a142 1
	while( word!=NULL ){ 
d147 1
a147 1
		word = strtok(NULL, SEPERATOR);//find next word 
d181 6
d188 14
d203 3
d207 2
d210 29
@


1.9
log
@countChar()
countLine()
@
text
@d96 1
a96 1
	if( strcmp(name, "stdin") == 0 )
@


1.8
log
@setPrintMode() -> bit mode
countWord()
getNumOf*()
@
text
@d9 2
a10 1
#define DEBUG
d47 1
a47 2
	//TODO
	return 1;
d51 1
a51 2
	//TODO
	return 1;
d108 1
d110 3
a112 1
	line[strlen(line)-1]='\0';
d146 35
@


1.7
log
@name change.
@
text
@d8 2
d17 4
d44 1
a44 1
int getPrintLines(void)
d49 1
a49 1
int getPrintChars(void)
d54 1
a54 1
int getPrintWords(void)
d56 1
a56 2
	//TODO
	return 1;
d58 1
a58 1
void setPrintMode(void)
d60 8
a67 2
	//TODO
	isPrintWord = isPrintLine = isPrintChar = 1;
d73 1
a73 1
		printf("Number of Words = %d\n", getPrintWords() );
d75 1
a75 1
		printf("Number of Chars = %d\n", getPrintChars() );
d77 1
a77 1
		printf("Number of Lines = %d\n", getPrintLines() );
d121 22
@


1.6
log
@refinement - initList()
@
text
@d11 3
a13 3
int isNumOfLinePrint;
int isNumOfCharPrint;
int isNumOfWordPrint;
d38 1
a38 1
int getNumOfLines(void)
d43 1
a43 1
int getNumOfChars(void)
d48 1
a48 1
int getNumOfWords(void)
d56 1
a56 1
	isNumOfWordPrint = isNumOfLinePrint = isNumOfCharPrint = 1;
d61 6
a66 6
	if( isNumOfWordPrint )
		printf("Number of Words = %d\n", getNumOfWords() );
	if( isNumOfCharPrint )
		printf("Number of Chars = %d\n", getNumOfChars() );
	if( isNumOfLinePrint)
		printf("Number of Lines = %d\n", getNumOfLines() );
d68 1
d75 1
@


1.5
log
@getLine() - bug patched
@
text
@d80 1
a80 1
void initLineList(char *name)
d82 2
@


1.4
log
@multiple argument - error print.
@
text
@a16 1
int _hasNextLine;
a88 1
	_hasNextLine = true;
d95 5
a99 2
	if( feof(_fp) )
		_hasNextLine = false;
d105 1
a105 1
	return _hasNextLine;
@


1.3
log
@handleArgument()
initLineList()
getLine()
hasNextLine()
true/false
@
text
@d14 2
d26 1
a26 4
	//if (argc > 2) 
		//eprintf("ERROR: This version of program doesn't support multiple argument.\n");
	
	//TODO
d30 3
d34 2
a35 1
		setFileName("stdin");
@


1.2
log
@getNumOf*
setPritMode()
printResult()
set/getFileName()
TODO - getNumOf*()
User Story - Print Result Completed / 1Hour
@
text
@a9 1
FILE *SourceCodeFile;
d15 2
d24 2
a25 2
	if (argc > 2) 
		eprintf("ERROR: This version of program doesn't support multiple argument.\n");
d28 2
a29 2
	else if( argc==2 ){
		SourceCodeFile = efopen(argv[1], "r");
d32 1
a32 1
		SourceCodeFile = stdin;
d78 11
a88 5
//TODO
//void LineList(char *name)
//{
	//static FILE *fp;
	//fp = efopen(name, "r");
d90 13
a102 1
//}
@


1.1
log
@Initial revision
@
text
@d12 4
a22 2
	char outputFileName[30];

d35 47
d83 1
@
